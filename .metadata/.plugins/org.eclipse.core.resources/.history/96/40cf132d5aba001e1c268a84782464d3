package o_Chapter14;

//! MVC
// : 사용자 인터페이스를 설계하는 소프트웨어 디자인 패턴 중 하나
// : 세가지 구성요소로 나누어(역할을 분담하여) 개발을 진행

//! 종류
// Model(모델), View(뷰), Controller(컨트롤러)

// 1. Model
// : 애플리케이션의 데이터와 비즈니스 로직을 담당
// : 데이터베이스, 파일 시스템, 외부 서비스와 통신을 통해 데이터를 저장하고 검색
// - 상태 변경에 대해 뷰와 컨트롤러에게 알릴 수 있는 메커니즘을 제공
// - 뷰와 컨트롤러의 구현 세부사항으로부터 독립적

// 2. View
// : 사용자에게 데이터를 표시하는 방법을 정의
// : Model의 정보를 표시, 사용자의 액션을 Controller에게 전달
// - 모델이 가진 정보를 사용자가 이해할 수 있는 형태로 변환

// 3. Controller
// : 사용자의 입력을 처리하고 모델과 뷰 사이의 상호작용을 관리
// : 사용자의 입력에 반응하여 모델을 업데이트하고, 필요한 경우 뷰를 새롭게 출력(재랜더링)

//! MVC 패턴의 장점
// - 관심사를 분리 : 각 구성 요소는 독립적인 기능과 책임 > 코드의 관리와 확장이 용이
// - 유지보수의 용이성 : 애플리케이션의 비즈니스 로직과 사용자 인터페이스가 분리

public class A_MVC {

	public static void main(String[] args) {

	}

}
